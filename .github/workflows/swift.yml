name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CI_XCODE_VER: '/Applications/Xcode_12.app/Contents/Developer'

jobs:
  swift-test-ios:
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build-Test
      run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -workspace Parse.xcworkspace -scheme ParseSwift\ \(iOS\) -destination platform\=iOS\ Simulator,name\=iPhone\ 11\ Pro\ Max build test | xcpretty
      env: 
        DEVELOPER_DIR: ${{ env.CI_XCODE_VER }}
    - name: Send codecov
      run: bash <(curl https://codecov.io/bash)

  swift-macos:
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Create and set the default keychain
      run: |
        security create-keychain -p "" temporary
        security default-keychain -s temporary
        security unlock-keychain -p "" temporary
        security set-keychain-settings -lut 7200 temporary
    - name: Build
      run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -target ParseSwift\ \(macOS\) | xcpretty
      env: 
        DEVELOPER_DIR: ${{ env.CI_XCODE_VER }}
 
  swift-tvos:
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -target ParseSwift\ \(tvOS\) | xcpretty
      env: 
        DEVELOPER_DIR: ${{ env.CI_XCODE_VER }}
    - name: Send codecov
      run: bash <(curl https://codecov.io/bash)

  swift-watchos:
    
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: Build
      run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -target ParseSwift\ \(watchOS\) | xcpretty
      env: 
        DEVELOPER_DIR: ${{ env.CI_XCODE_VER }}
    - name: Send codecov
      run: bash <(curl https://codecov.io/bash)

  build-test-swift:
    
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - name: Create and set the default keychain
      run: |
        security create-keychain -p "" temporary
        security default-keychain -s temporary
        security unlock-keychain -p "" temporary
        security set-keychain-settings -lut 7200 temporary
    - name: Build
      run: swift build -v
      env:
        DEVELOPER_DIR: ${{ env.CI_XCODE_VER }}
    - name: Test
      run: swift test --enable-code-coverage -v
      env:
        DEVELOPER_DIR: ${{ env.CI_XCODE_VER }}
    - name: Prepare codecov
      run: xcrun llvm-cov export -format="lcov" .build/debug/ParseSwiftPackageTests.xctest/Contents/MacOS/ParseSwiftPackageTests -instr-profile .build/debug/codecov/default.profdata > info.lcov
      env: 
        DEVELOPER_DIR: ${{ env.CI_XCODE_VER }}      
    - name: Send codecov
      run: bash <(curl https://codecov.io/bash)
      
  deploy_docs:
    
    needs: build-test-swift
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Cache Gems
        id: cache-gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      
      - name: Install Bundle
        run: |
          bundle config path vendor/bundle
          bundle install
      
      - name: Create Jazzy Docs
        run: ./Scripts/jazzy.sh
        env: 
          DEVELOPER_DIR: ${{ env.CI_XCODE_VER }}

      - name: Deploy Jazzy Docs
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          publish_dir: ./docs

  cocoapods:
    needs: [build-test-swift]
    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: CocoaPods
        run: pod lib lint
        env: 
          DEVELOPER_DIR: ${{ env.CI_XCODE_VER }} 
  carthage:

   needs: build-test-swift
   runs-on: macos-latest

   steps:
     - uses: actions/checkout@v2
     - name: Carthage Xcode Script
     - run: |
         xcconfig=$(mktemp /tmp/static.xcconfig.XXXXXX)
         trap 'rm -f "$xcconfig"' INT TERM HUP EXIT
         CURRENT_XCODE_VERSION=$(xcodebuild -version | grep "Build version" | cut -d' ' -f3)
         echo "EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_1200__BUILD_$CURRENT_XCODE_VERSION = arm64 arm64e armv7 armv7s armv6 armv8" >> $xcconfig
         echo 'EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_1200 = $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_simulator__NATIVE_ARCH_64_BIT_x86_64__XCODE_1200__BUILD_$(XCODE_PRODUCT_BUILD_VERSION))' >> $xcconfig
         echo 'EXCLUDED_ARCHS = $(inherited) $(EXCLUDED_ARCHS__EFFECTIVE_PLATFORM_SUFFIX_$(EFFECTIVE_PLATFORM_SUFFIX)__NATIVE_ARCH_64_BIT_$(NATIVE_ARCH_64_BIT)__XCODE_$(XCODE_VERSION_MAJOR))' >> $xcconfig
         export XCODE_XCCONFIG_FILE="$xcconfig"
     - name: Carthage 
       run: carthage build --no-skip-current
       env: 
        DEVELOPER_DIR: ${{ env.CI_XCODE_VER }} 
